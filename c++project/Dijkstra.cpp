#include <iostream>
#include <random>
#include <fstream>
#include <algorithm>

using namespace std;
int min_array(double* a);

int number = 25;
double INF = 1000000.0;
double STRAIGHT = 2.0;
double DIAGONAL = 1.4;
//count,save
int where_[100] = { 0, };
double sum_distance_first[100] = { 0, };
double sum_distance_second[100] = { 0, };
double sum_distance_third[100] = { 0, };
double sum_distance_fourth[100] = { 0, };
double sum_distance_fifth[100] = { 0, };
double sum_distance_sixth[100] = { 0, };
double sum_distance_seventh[100] = { 0, };
double sum_distance_eighth[100] = { 0, };
double sum_distance[8][100] = { 0, };
int min_index[8];

int block_number[8] = {4,5,6,11,13,18,19,20};
bool block_complete[8] = { false, };

double orginal[25][25] = {
	{0,STRAIGHT,	INF,	INF,DIAGONAL,INF,INF,STRAIGHT,INF,INF,INF,INF,INF,INF,INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{STRAIGHT,	0,	STRAIGHT,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	STRAIGHT,	0,	STRAIGHT,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	STRAIGHT,	0,	INF,	INF,DIAGONAL,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{1.4,DIAGONAL,	INF,	INF,	0,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{STRAIGHT,	INF,	INF,	INF,DIAGONAL,	INF,	INF,	0,	STRAIGHT,	INF,	INF,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	STRAIGHT,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	STRAIGHT,	0,	STRAIGHT,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	STRAIGHT,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	STRAIGHT,0,	STRAIGHT,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	INF,	STRAIGHT,	INF,	INF,DIAGONAL,	INF,	INF,	STRAIGHT,	0,	INF,	INF,DIAGONAL,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	INF,	INF,	INF,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,DIAGONAL,	INF,	INF,	0,	STRAIGHT,	INF,	INF,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	STRAIGHT,	0,	STRAIGHT,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	STRAIGHT,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,INF,	INF,DIAGONAL,DIAGONAL,	INF,	STRAIGHT,	0,	STRAIGHT,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	STRAIGHT, INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,INF,	INF,DIAGONAL,	INF,	INF,	STRAIGHT,	0,	INF,	INF,DIAGONAL,	INF,	INF,	INF,	STRAIGHT},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,	INF,INF,DIAGONAL,DIAGONAL,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,INF,DIAGONAL,DIAGONAL,	INF,	INF,	0,	INF,	INF,DIAGONAL,DIAGONAL},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,	INF,DIAGONAL,	INF,	INF,	0,	STRAIGHT,	INF,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	STRAIGHT,	0,	STRAIGHT,	INF},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,DIAGONAL,DIAGONAL,	INF,	STRAIGHT,	0,	STRAIGHT},
	{INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	INF,	STRAIGHT,	INF,	INF,DIAGONAL,	INF,	INF,	STRAIGHT,	0}
};
double no_center[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF} ,
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	 ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	 ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF  } ,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }	 ,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF		  }	 ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF		  }	 ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF	  }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0},
};
double doubleup_up[25][25] = {
	{0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			},
	{2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				},
	{INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				},
	{INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			},
	{1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   },
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF					   },
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF					   },
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF			   },
	{INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF	   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF						 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF						 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF		  },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF			 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2			 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0		  }
};
double doubleup_right[25][25] = {
	{0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  },
	{2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			 },
	{INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			 },
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		},
	{INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  },
	{INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF				},
	{INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF			 },
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF		   },
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF	 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF			  },
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF					 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF					   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2		   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,0,INF,INF,INF,1.4},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF		},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF			 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2			 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0		  }
};
double doubleup_down[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  },
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			 },
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			 },
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  },
	{INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   },
	{INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						 },
	{INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						 },
	{INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF	   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF					   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF					   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,1.4,1.4	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF			},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF				},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2				},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0			}
};
double doubleup_left[25][25] = {
	{0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			 },
	{2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   },
	{INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   },
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		   },
	{1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 },
	{INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 },
	{INF,INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 },
	{2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 },
	{INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						},
	{INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						 },
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF			  },
	{INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 },
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF,INF,INF,INF,INF,INF,INF	 },
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF				 },
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF						},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF						 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2			  },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF,INF	 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF,INF	 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,INF,INF,INF,0,INF,INF,1.4,INF	 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF			 },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2			   },
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0		   }
};

double block_1[25][25] = {
	{	0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		 }		 ,
	{2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	 ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }		 ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		   }	 ,
	{1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		}	 ,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	 ,
	{INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						}	 ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF					  }		 ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		}	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF					  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF					  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF		   }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0		   }
};
double block_2[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF} ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2}	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0}
};
double block_3[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  },
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				}		,
	{INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }		,
	{INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  }		,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				}		,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						}		,
	{INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						  }		,
	{INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF				 }		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		  }		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF						}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF						}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF			 }		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0			 }
};
double block_4[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			}	   ,
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	   ,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				   }	   ,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF							}	   ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						  }		   ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF			}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF			}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF				   }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF							}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF						  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF			   }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0			   }
};
double block_5[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }	 ,
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }	 ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }	 ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }	 ,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 }	 ,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 }	 ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 }	 ,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }	 ,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						 }	 ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						   } ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF				  }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		   } ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF		   } ,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF				 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF						 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF						   } ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2				  }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF	 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF	 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF	 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF			  }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF				 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2				 }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0			  }
};
double block_6[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	   ,
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	   ,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						  }		   ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						  }		   ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF			}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF				   }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF							}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF						  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF			}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF	  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF				 }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF				   }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2				  }		   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0			   }
};
double block_7[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }	   ,
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF					} 	   ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF					} 	   ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }	   ,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		} 	   ,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		} 	   ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		} 	   ,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF					} 	   ,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF							} 	   ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF							} 	   ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF					} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF			  }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF					} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF							  }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF							  }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2					} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF		} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF			  }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF		} 	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF				 }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF					 }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2					 }	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0				 }
};
double block_8[25][25] = {
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		   }	  ,
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }		  ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }		  ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		   }	  ,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}		,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}		,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}		,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }		  ,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF					  }		  ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF					  }		  ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF			  }		  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		}	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}		,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF			  }		  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF					  }		  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF						}	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2			   }	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4		}	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF		   }	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF			  }		  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2			   }	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0			 }
};

double block_all [8][25] [25] = {
	{
	{	0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		 }		 ,
	{2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	 ,
	{INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			  }		 ,
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		   }	 ,
	{1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		}	 ,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	 ,
	{INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						}	 ,
	{INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF					  }		 ,
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		}	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF					  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF					  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF}	   ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF		   }	 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2			  }		 ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0		   }
},
	{
	{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF} ,
	{INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF	},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2}	  ,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2},
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0}
},
	{{0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  },
	{2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				}		,
	{INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				 }		,
	{INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF			   }	,
	{INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF		  }		,
	{2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF				}		,
	{INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF						}		,
	{INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF						  }		,
	{INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF				 }		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF		  }		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF						}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF						}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF	}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF			 }		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2				}		,
	{INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0			 }
},
	{{ 0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ 2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ 2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2 },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2 },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0 }
},
	{{ 0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ 2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ 2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2 },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2 },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0 }
},
	{{ 0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ 2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ 2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,INF,INF,INF,2,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2 },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,INF,0,2,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2 },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0 }
},
	{{ 0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ 2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ 2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2 },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2 },
	{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0 }
},
	{{ 0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ 2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ 2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,2,INF,INF,INF,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF,1.4,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF,INF,INF,INF,2,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2,INF,INF,INF,INF,INF,2,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0,2,INF,INF,1.4,INF,INF,2,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,INF,INF,1.4,INF,INF,INF,2 },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,0,INF,INF,INF,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,1.4,1.4,INF,INF,0,INF,INF,1.4,1.4 },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,INF,0,2,INF,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,INF,INF,2,0,2,INF },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,INF,1.4,INF,2,0,2 },
{ INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,INF,2,INF,INF,1.4,INF,INF,2,0 }
}
};
typedef double(*arrPointer)[25];

bool v[25];
double d[25];

int createRandNum(int num);
int* shuffle_block(int arr[]);

int block[8];
int random_doubleup = createRandNum(3);
int random_basecircle_up = createRandNum(3);
int random_basecircle_down = createRandNum(3);
int random_basecircle_left = createRandNum(3);
int random_basecircle_right = createRandNum(3);
int case_[13];


int createRandNum(int num) {
	std::random_device rd;

	std::mt19937 gen(rd());

	std::uniform_int_distribution<int> dis(0, num);

	return dis(gen);
}

int* shuffle_block(int arr[]) {
	int temp;
	int rn;
	for (int i = 0; i < 8; i++) {
		rn = createRandNum(3);
		temp = arr[i];
		arr[i] = arr[rn];
		arr[rn] = temp;
	}
	return arr;
}

arrPointer block_graph(double(*a)[25], int second, int third, int fourth, int fifth, int sixth, int seventh, int eighth) {
	switch (second) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}
	switch (third) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}
	switch (fourth) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}
	switch (fifth) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}
	switch (sixth) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}
	switch (seventh) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}
	switch (eighth) {
	case 0:
		break;
	case 1:
		a[0][4] = 1.4;
		a[1][4] = 1.4;
		a[7][4] = 1.4;
		a[8][4] = 1.4;
		a[4][0] = 1.4;
		a[4][1] = 1.4;
		a[4][7] = 1.4;
		a[4][8] = 1.4;
		break;
	case 2:
		a[1][5] = 1.4;
		a[2][5] = 1.4;
		a[8][5] = 1.4;
		a[9][5] = 1.4;
		a[5][1] = 1.4;
		a[5][2] = 1.4;
		a[5][8] = 1.4;
		a[5][9] = 1.4;
		break;
	case 3:
		a[2][6] = 1.4;
		a[3][6] = 1.4;
		a[9][6] = 1.4;
		a[10][6] = 1.4;
		a[6][2] = 1.4;
		a[6][3] = 1.4;
		a[6][9] = 1.4;
		a[6][10] = 1.4;
		break;
	case 4:
		a[7][11] = 1.4;
		a[8][11] = 1.4;
		a[14][11] = 1.4;
		a[15][11] = 1.4;
		a[11][7] = 1.4;
		a[11][8] = 1.4;
		a[11][14] = 1.4;
		a[11][15] = 1.4;
		break;
	case 5:
		a[9][13] = 1.4;
		a[10][13] = 1.4;
		a[16][13] = 1.4;
		a[17][13] = 1.4;
		a[13][9] = 1.4;
		a[13][10] = 1.4;
		a[13][16] = 1.4;
		a[13][17] = 1.4;
		break;
	case 6:
		a[14][18] = 1.4;
		a[15][18] = 1.4;
		a[21][18] = 1.4;
		a[22][18] = 1.4;
		a[18][14] = 1.4;
		a[18][15] = 1.4;
		a[18][21] = 1.4;
		a[18][22] = 1.4;
		break;
	case 7:
		a[15][19] = 1.4;
		a[16][19] = 1.4;
		a[22][19] = 1.4;
		a[23][19] = 1.4;
		a[19][15] = 1.4;
		a[19][16] = 1.4;
		a[19][22] = 1.4;
		a[19][23] = 1.4;
		break;
	case 8:
		a[16][20] = 1.4;
		a[17][20] = 1.4;
		a[23][20] = 1.4;
		a[24][20] = 1.4;
		a[20][16] = 1.4;
		a[20][17] = 1.4;
		a[20][23] = 1.4;
		a[20][24] = 1.4;
		break;
	}

	return a;
}

int getSmallIndex() {
	double min = INF;
	int index = 0;
	for (int i = 0; i < number; i++) {
		if (d[i] < min && !v[i]) {
			min = d[i];
			index = i;
		}
	}
	return index;
}

void dijkstra(int start,double a[][25]) {
	for (int i = 0; i < number; i++) {
		d[i] = 0;
		v[i] = false;
	}
	for (int i = 0; i < number; i++) {
		d[i] = a[start][i];
	}
	v[start] = true;
	for (int i = 0; i < number - 2; i++) {
		int current = getSmallIndex();
		v[current] = true;
		for (int j = 0; j < number; j++) {
			if (!v[j]) {
				if (d[current] + a[current][j] < d[j]) {
					d[j] = d[current] + a[current][j];
				}
			}
		}
	}
}

int main(void) {
	while (random_basecircle_up == random_basecircle_down) {
		random_basecircle_down = createRandNum(3);
	}
	while (random_basecircle_up == random_basecircle_left || random_basecircle_down == random_basecircle_left) {
		random_basecircle_left = createRandNum(3);
	}
	while (random_basecircle_up == random_basecircle_right || random_basecircle_down == random_basecircle_right || random_basecircle_left == random_basecircle_right) {
		random_basecircle_right = createRandNum(3);
	}
	for (int i = 0; i < 8; i++) block[i] = (i + 1) % 4;
	shuffle_block(block);
	{
		case_[0] = random_basecircle_up;
		case_[1] = random_basecircle_right;
		case_[2] = random_basecircle_down;
		case_[3] = random_basecircle_left;
		case_[4] = random_doubleup;
		case_[5] = block[0];
		case_[6] = block[1];
		case_[7] = block[2];
		case_[8] = block[3];
		case_[9] = block[4];
		case_[10] = block[5];
		case_[11] = block[6];
		case_[12] = block[7];
	}

	std::cout << "位置情報：";
	for (int i = 0; i < 13; i++) {
		std::cout << case_[i] << ", ";
	}
	std::cout<<endl;

	////////////////////////////
	// sum_disatance_first start!//
	////////////////////////////
	if (random_basecircle_up == random_doubleup) {
		dijkstra(24, no_center);
		where_[0] = 24;
		for (int i = 0; i < 8; i++) {
			sum_distance_first[i] += d[2];
		}
		dijkstra(2, block_1);
		where_[1] = 2;
		for (int i = 0; i < 8; i++) {
			if(block[i]== random_basecircle_up){
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];				
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				}
			}
			else if(block[i]== random_basecircle_right){
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				}
			}
			else if(block[i]== random_basecircle_down){
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				}
			} 
			else if(block[i]== random_basecircle_left){
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				}
			}
		}
	}
	else if (random_basecircle_right == random_doubleup) {
		dijkstra(24, no_center);
		where_[0] = 24;
		for (int i = 0; i < 8; i++) {
			sum_distance_first[i] += d[17];
		}
		dijkstra(17, doubleup_right);
		where_[1]= 17;
		for (int i = 0; i < 8; i++) {
			if (block[i] == random_basecircle_up) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				}
			}
			if (block[i] == random_basecircle_right) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 3:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 4:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 5:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 6:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 7:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				}
			}
			if (block[i] == random_basecircle_down) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 3:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 4:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 5:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 6:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 7:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				}
			}
			if (block[i] == random_basecircle_left) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 3:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 4:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 5:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 6:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 7:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				}
			}
		}
	}
	else if (random_basecircle_down == random_doubleup) {
		dijkstra(24, no_center);
		where_[0] = 24;
		for (int i = 0; i < 8; i++) {
			sum_distance_first[i] += d[23];
		}
		dijkstra(23, doubleup_down);
		where_[1] = 23;
		for (int i = 0; i < 8; i++) {
			if (block[i] == random_basecircle_up) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 3:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 4:;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				}
			}
			if (block[i] == random_basecircle_right) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				}
			}
			if (block[i] == random_basecircle_down) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				}
			}
			if (block[i] == random_basecircle_left) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				}
			}
		}
		}
	else if (random_basecircle_left == random_doubleup) {
		dijkstra(24, no_center);
		where_[0] = 24;
		for (int i = 0; i < 8; i++) {
			sum_distance_first[i] += d[14];
		}
		dijkstra(14, doubleup_left);
		where_[1] = 14;
		for (int i = 0; i < 8; i++) {
			if (block[i] == random_basecircle_up) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[2];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[1];
					break;
				}
			}
			if (block[i] == random_basecircle_right) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[10];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[17];
					break;
				}
			}
			if (block[i] == random_basecircle_down) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[22];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[23];
					break;
				}
			}
			if (block[i] == random_basecircle_left) {
				switch (i) {
				case 0:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 1:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 2:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 3:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 4:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[7];
					break;
				case 5:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 6:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				case 7:
					dijkstra(where_[1], block_all[i]);
					sum_distance_first[i] += d[block_number[i]];
					dijkstra(block_number[i], block_all[i]);
					sum_distance_first[i] += d[14];
					break;
				}
			}
		}
	}

	int min_index = min_array(sum_distance_first);
	///////////////
	//where_ first//
	///////////////
	if (block[min_index] == random_basecircle_up) {
		int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
		where_[2] = block_number[min_index];
		where_[3] = num[min_index];
		block_complete[min_index] = true;
	}
	else if (block[min_index] == random_basecircle_right) {
		int num[8] = { 10,10,10,17,17,17,17,17 };
		where_[2] = block_number[min_index];
		where_[3] = num[min_index];
		block_complete[min_index] = true;
	}
	else if (block[min_index] == random_basecircle_down) {
		int num[8] = { 22,22,23,22,23,22,22,23 };
		where_[2] = block_number[min_index];
		where_[3] = num[min_index];
		block_complete[min_index] = true;
	}
	else if (block[min_index] == random_basecircle_left) {
		int num[8] = { 7,7,7,7,14,14,14,14 };
		where_[2] = block_number[min_index];
		where_[3] = num[min_index];
		block_complete[min_index] = true;
	}

	//////////////////////////////
	// sum_distance_second start!//
	//////////////////////////////
	for (int i = 0; i < 8; i++) {
		if (block[i] == random_basecircle_up) {
			if (min_index != i) {
				switch (i) {
				case 0:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[1];
					where_[5] = 1;
					break;
				case 1:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 10 || where_[3] == 17 || where_[3] == 23) {
						sum_distance_second[i] += d[1];
						where_[5] = 1;
					}
					else if (where_[3] == 7 || where_[3] == 14 || where_[3] == 22) {
						sum_distance_second[i] += d[2];
						where_[5] = 2;
					}
					break;
				case 2:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[2];
					where_[5] = 2;
					break;
				case 3:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[2];
					where_[5] = 2;
					break;
				case 4:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[1];
					where_[5] = 1;
					break;
				case 5:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[1];
					where_[5] = 1;
					break;
				case 6:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 10 || where_[3] == 17 || where_[3] == 23) {
						sum_distance_second[i] += d[1];
						where_[5] = 1;
					}
					else if (where_[3] == 7 || where_[3] == 14 || where_[3] == 22) {
						sum_distance_second[i] += d[2];
						where_[5] = 2;
					}
					break;
				case 7:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[1];
					where_[5] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i) {
				switch (i) {
				case 0:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[10];
					where_[5] = 10;
					break;
				case 1:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[10];
					where_[5] = 10;
					break;
				case 2:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[10];
					where_[5] = 10;
					break;
				case 3:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 7 || where_[3] == 1 || where_[3] == 2) {
						sum_distance_second[i] += d[17];
						where_[5] = 17;
					}
					else if (where_[3] == 14 || where_[3] == 22 || where_[3] == 23) {
						sum_distance_second[i] += d[10];
						where_[5] = 10;
					}
					break;
				case 4:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 7 || where_[3] == 1 || where_[3] == 2) {
						sum_distance_second[i] += d[17];
						where_[5] = 17;
					}
					else if (where_[3] == 14 || where_[3] == 22 || where_[3] == 23) {
						sum_distance_second[i] += d[10];
						where_[5] = 10;
					}
					break;
				case 5:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[17];
					where_[5] = 17;
					break;
				case 6:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[17];
					where_[5] = 17;
					break;
				case 7:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[17];
					where_[5] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i) {
				switch (i) {
				case 0:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[22];
					where_[5] = 22;
					break;
				case 1:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 1 || where_[3] == 7 || where_[3] == 14) {
						sum_distance_second[i] += d[23];
						where_[5] = 23;
					}
					else if (where_[3] == 2 || where_[3] == 10 || where_[3] == 17) {
						sum_distance_second[i] += d[22];
						where_[5] = 22;
					}
					break;
				case 2:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[23];
					where_[5] = 23;
					break;

				case 3:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[22];
					where_[5] = 22;
					break;
				case 4:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[23];
					where_[5] = 23;
					break;
				case 5:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[22];
					where_[5] = 22;
					break;
				case 6:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 1 || where_[3] == 7 || where_[3] == 14) {
						sum_distance_second[i] += d[23];
						where_[5] = 23;
					}
					else if (where_[3] == 2 || where_[3] == 10 || where_[3] == 17) {
						sum_distance_second[i] += d[22];
						where_[5] = 22;
					}
					break;
				case 7:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[23];
					where_[5] = 23;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i) {
				switch (i) {
				case 0:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[7];
					where_[5] = 7;
					break;
				case 1:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[7];
					where_[5] = 7;
					break;
				case 2:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[7];
					where_[5] = 7;
					break;
				case 3:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 1 || where_[3] == 2 || where_[3] == 10) {
						sum_distance_second[i] += d[14];
						where_[5] = 14;
					}
					else if (where_[3] == 17 || where_[3] == 22 || where_[3] == 23) {
						sum_distance_second[i] += d[7];
						where_[5] = 7;
					}
					break;
				case 4:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					if (where_[3] == 1 || where_[3] == 2 || where_[3] == 10) {
						sum_distance_second[i] += d[14];
						where_[5] = 14;
					}
					else if (where_[3] == 17 || where_[3] == 22 || where_[3] == 23) {
						sum_distance_second[i] += d[7];
						where_[5] = 7;
					}
					break;
				case 5:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[14];
					where_[5] = 14;
					break;
				case 6:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[14];
					where_[5] = 14;
					break;
				case 7:
					dijkstra(where_[3], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_second[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_second[i] += d[14];
					where_[5] = 14;
					break;
				}
			}
		}
	}

	int min_index_2 = min_array(sum_distance_second);
	//////////////////
	//where_ second//
	//////////////////
	if (block[min_index_2] == random_basecircle_up) {
		int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
		if (where_[4] == 10 || where_[4] == 17 || where_[4] == 23) {
			num[1] = 1;
			num[6] = 1;
		}
		else if (where_[4] == 7 || where_[4] == 14 || where_[4] == 22) {
			num[1] = 2;
			num[6] = 2;
		}
		where_[4] = block_number[min_index_2];
		where_[5] = num[min_index_2];
		block_complete[min_index_2] = true;
	}
	else if (block[min_index_2] == random_basecircle_right) {
		int num[8] = { 10,10,10,17,17,17,17,17 };
		if (where_[3] == 7 || where_[3] == 1 || where_[3] == 2) {
			num[3] = 17;
			num[4] = 17;
		}
		else if (where_[3] == 14 || where_[3] == 22 || where_[3] == 23) {
			num[2] = 10;
			num[4] = 10;
		}
		where_[4] = block_number[min_index_2];
		where_[5] = num[min_index_2];
		block_complete[min_index_2] = true;
	}
	else if (block[min_index_2] == random_basecircle_down) {
		int num[8] = { 22,22,23,22,23,22,22,23 };
		if (where_[3] == 1 || where_[3] == 7 || where_[3] == 14) {
			num[1] = 23;
			num[6] = 23;
		}
		else if (where_[3] == 2 || where_[3] == 10 || where_[3] == 17) {
			num[1] = 22;
			num[6] = 22;
		}
		where_[4] = block_number[min_index_2];
		where_[5] = num[min_index_2];
		block_complete[min_index_2] = true;
	}
	else if (block[min_index_2] == random_basecircle_left) {
		int num[8] = { 7,7,7,7,14,14,14,14 };
		if (where_[3] == 1 || where_[3] == 2 || where_[3] == 10) {
			num[3] = 14;
			num[4] = 14;
		}
		else if (where_[3] == 17 || where_[3] == 22 || where_[3] == 23) {
			num[3] = 7;
			num[4] = 7;
		}
		where_[4] = block_number[min_index_2];
		where_[5] = num[min_index_2];
		block_complete[min_index_2] = true;
	}
	////////////////////////////
	// sum_distance_third start!//
	////////////////////////////
	for (int i = 0; i < 8; i++) {
		if (block[i] == random_basecircle_up) {
			if (min_index != i && min_index_2 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[1];
					where_[7] = 1;
					break;
				case 1:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 10 || where_[5] == 17 || where_[5] == 23) {
						sum_distance_third[i] += d[1];
						where_[7] = 1;
					}
					else if (where_[5] == 7 || where_[5] == 14 || where_[5] == 22) {
						sum_distance_third[i] += d[2];
						where_[7] = 2;
					}
					break;
				case 2:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[2];
					where_[7] = 2;
					break;
				case 3:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[1];
					where_[7] = 1;
					break;
				case 4:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[1];
					where_[7] = 1;
					break;
				case 5:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[1];
					where_[7] = 1;
					break;
				case 6:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 10 || where_[5] == 17 || where_[5] == 25) {
						sum_distance_third[i] += d[1];
						where_[7] = 1;
					}
					else if (where_[5] == 7 || where_[5] == 14 || where_[5] == 22) {
						sum_distance_third[i] += d[2];
						where_[7] = 2;
					}
					break;
				case 7:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[1];
					where_[7] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i && min_index_2 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[10];
					where_[7] = 10;
					break;
				case 1:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[10];
					where_[7] = 10;
					break;
				case 2:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[10];
					where_[7] = 10;
					break;
				case 3:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 7 || where_[5] == 1 || where_[5] == 2) {
						sum_distance_third[i] += d[17];
						where_[7] = 17;
					}
					else if (where_[5] == 14 || where_[5] == 22 || where_[5] == 25) {
						sum_distance_third[i] += d[10];
						where_[7] = 10;
					}
					break;
				case 4:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 7 || where_[5] == 1 || where_[5] == 2) {
						sum_distance_third[i] += d[17];
						where_[7] = 17;
					}
					else if (where_[5] == 14 || where_[5] == 22 || where_[5] == 25) {
						sum_distance_third[i] += d[10];
						where_[7] = 10;
					}
					break;
				case 5:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[17];
					where_[7] = 17;
					break;
				case 6:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[17];
					where_[7] = 17;
					break;
				case 7:
					dijkstra(where_[5], block_all[i]);
					where_[4] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, 0, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[17];
					where_[7] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i && min_index_2 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[22];
					where_[7] = 22;
					break;
				case 1:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 1 || where_[5] == 7 || where_[5] == 14) {
						sum_distance_third[i] += d[22];
						where_[7] = 22;
					}
					else if (where_[5] == 2 || where_[5] == 10 || where_[5] == 17) {
						sum_distance_third[i] += d[22];
						where_[7] = 22;
					}
					break;
				case 2:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[22];
					where_[7] = 22;
					break;

				case 3:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[22];
					where_[7] = 22;
					break;
				case 4:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[22];
					where_[7] = 22;
					break;
				case 5:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[22];
					where_[7] = 22;
					break;
				case 6:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 1 || where_[5] == 7 || where_[5] == 14) {
						sum_distance_third[i] += d[22];
						where_[7] = 22;
					}
					else if (where_[5] == 2 || where_[5] == 10 || where_[5] == 17) {
						sum_distance_third[i] += d[22];
						where_[7] = 22;
					}
					break;
				case 7:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[22];
					where_[7] = 22;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i && min_index_2 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[7];
					where_[7] = 7;
					break;
				case 1:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[7];
					where_[7] = 7;
					break;
				case 2:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[7];
					where_[7] = 7;
					break;
				case 3:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 1 || where_[5] == 2 || where_[5] == 10) {
						sum_distance_third[i] += d[14];
						where_[7] = 14;
					}
					else if (where_[5] == 17 || where_[5] == 22 || where_[5] == 25) {
						sum_distance_third[i] += d[7];
						where_[7] = 7;
					}
					break;
				case 4:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					if (where_[5] == 1 || where_[5] == 2 || where_[5] == 10) {
						sum_distance_third[i] += d[14];
						where_[7] = 14;
					}
					else if (where_[5] == 17 || where_[5] == 22 || where_[5] == 25) {
						sum_distance_third[i] += d[7];
						where_[7] = 7;
					}
					break;
				case 5:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[14];
					where_[7] = 14;
					break;
				case 6:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[14];
					where_[7] = 14;
					break;
				case 7:
					dijkstra(where_[5], block_all[i]);
					where_[6] = d[block_number[i]];
					sum_distance_third[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_index + 1, min_index_2 + 1, 0, 0, 0, 0, 0));
					sum_distance_third[i] += d[14];
					where_[7] = 14;
					break;
				}
			}
		}
	}

	int min_index_3 = min_array(sum_distance_third);
	////////////////// 
	//where_ third//
	//////////////////
	{
		int a = 5;
		int b = 6;
		int c = 7;
		if (block[min_index_3] == random_basecircle_up) {
			int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
			if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
				num[1] = 1;
				num[6] = 1;
			}
			else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
				num[1] = 2;
				num[6] = 2;
			}
			where_[b] = block_number[min_index_3];
			where_[c] = num[min_index_3];
			block_complete[min_index_3] = true;
		}
		else if (block[min_index_3] == random_basecircle_right) {
			int num[8] = { 10,10,10,17,17,17,17,17 };
			if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
				num[3] = 17;
				num[4] = 17;
			}
			else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 23) {
				num[2] = 10;
				num[4] = 10;
			}
			where_[b] = block_number[min_index_3];
			where_[c] = num[min_index_3];
			block_complete[min_index_3] = true;
		}
		else if (block[min_index_3] == random_basecircle_down) {
			int num[8] = { 22,22,23,22,23,22,22,23 };
			if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
				num[1] = 23;
				num[6] = 23;
			}
			else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
				num[1] = 22;
				num[6] = 22;
			}
			where_[b] = block_number[min_index_3];
			where_[c] = num[min_index_3];
			block_complete[min_index_3] = true;
		}
		else if (block[min_index_3] == random_basecircle_left) {
			int num[8] = { 7,7,7,7,14,14,14,14 };
			if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
				num[3] = 14;
				num[4] = 14;
			}
			else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 23) {
				num[3] = 7;
				num[4] = 7;
			}
			where_[b] = block_number[min_index_3];
			where_[c] = num[min_index_3];
			block_complete[min_index_3] = true;
		}
	}

	//////////////////////////////
	// sum_distance_fourth start!//
	/////////////////////////////
	for (int i = 0; i < 8; i++) {
		int a = 7;
		int b = 8;
		int c = 9;
		int min_2 = min_index + 1;
		int min_3 = min_index_2 + 1;
		int min_4 = min_index_3 + 1;
		int min_5 = 0;
		int min_6 = 0;
		int min_7 = 0;
		int min_8 = 0;
		if (block[i] == random_basecircle_up) {
			if (min_index != i && min_index_2 != i && min_index_3 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[1];
					where_[c] = 1;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
						sum_distance_fourth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_fourth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[2];
					where_[c] = 2;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[1];
					where_[c] = 1;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[1];
					where_[c] = 1;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[1];
					where_[c] = 1;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 25) {
						sum_distance_fourth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_fourth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[1];
					where_[c] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i && min_index_2 != i && min_index_3 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[10];
					where_[c] = 10;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[10];
					where_[c] = 10;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[10];
					where_[c] = 10;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_fourth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fourth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_fourth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fourth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[17];
					where_[c] = 17;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[17];
					where_[c] = 17;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[17];
					where_[c] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i && min_index_2 != i && min_index_3 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[22];
					where_[c] = 22;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_fourth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_fourth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[22];
					where_[c] = 22;
					break;

				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[22];
					where_[c] = 22;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[22];
					where_[c] = 22;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[22];
					where_[c] = 22;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_fourth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_fourth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[22];
					where_[c] = 22;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i && min_index_2 != i && min_index_3 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[7];
					where_[c] = 7;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[7];
					where_[c] = 7;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[7];
					where_[c] = 7;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_fourth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fourth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_fourth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fourth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[14];
					where_[c] = 14;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[14];
					where_[c] = 14;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fourth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fourth[i] += d[14];
					where_[c] = 14;
					break;
				}
			}
		}
	}

	int min_index_4 = min_array(sum_distance_fourth);
	// ///////////////
	// where_ fourth//
	//////////////////
	{
		int a = 7;
		int b = 8;
		int c = 9;
		if (block[min_index_4] == random_basecircle_up) {
			int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
			if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
				num[1] = 1;
				num[6] = 1;
			}
			else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
				num[1] = 2;
				num[6] = 2;
			}
			where_[b] = block_number[min_index_4];
			where_[c] = num[min_index_4];
			block_complete[min_index_4] = true;
		}
		else if (block[min_index_4] == random_basecircle_right) {
			int num[8] = { 10,10,10,17,17,17,17,17 };
			if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
				num[3] = 17;
				num[4] = 17;
			}
			else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 23) {
				num[2] = 10;
				num[4] = 10;
			}
			where_[b] = block_number[min_index_4];
			where_[c] = num[min_index_4];
			block_complete[min_index_4] = true;
		}
		else if (block[min_index_4] == random_basecircle_down) {
			int num[8] = { 22,22,23,22,23,22,22,23 };
			if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
				num[1] = 23;
				num[6] = 23;
			}
			else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
				num[1] = 22;
				num[6] = 22;
			}
			where_[b] = block_number[min_index_4];
			where_[c] = num[min_index_4];
			block_complete[min_index_4] = true;
		}
		else if (block[min_index_4] == random_basecircle_left) {
			int num[8] = { 7,7,7,7,14,14,14,14 };
			if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
				num[3] = 14;
				num[4] = 14;
			}
			else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 23) {
				num[3] = 7;
				num[4] = 7;
			}
			where_[b] = block_number[min_index_4];
			where_[c] = num[min_index_4];
			block_complete[min_index_4] = true;
		}
	}


	////////////////////////////
	// sum_distance_fifth start!//
	////////////////////////////
	for (int i = 0; i < 8; i++) {
		int a = 9;
		int b = 10;
		int c = 11;
		int min_2 = min_index + 1;
		int min_3 = min_index_2 + 1;
		int min_4 = min_index_3+ 1;
		int min_5 = min_index_4 + 1;
		int min_6 = 0;
		int min_7 = 0;
		int min_8 = 0;
		if (block[i] == random_basecircle_up) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[1];
					where_[c] = 1;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
						sum_distance_fifth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_fifth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[2];
					where_[c] = 2;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[1];
					where_[c] = 1;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[1];
					where_[c] = 1;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[1];
					where_[c] = 1;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 25) {
						sum_distance_fifth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_fifth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[1];
					where_[c] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[10];
					where_[c] = 10;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[10];
					where_[c] = 10;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[10];
					where_[c] = 10;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_fifth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fifth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_fifth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fifth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[17];
					where_[c] = 17;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[17];
					where_[c] = 17;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[17];
					where_[c] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[22];
					where_[c] = 22;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_fifth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_fifth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[22];
					where_[c] = 22;
					break;

				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[22];
					where_[c] = 22;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[22];
					where_[c] = 22;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[22];
					where_[c] = 22;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_fifth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_fifth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[22];
					where_[c] = 22;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[7];
					where_[c] = 7;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[7];
					where_[c] = 7;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[7];
					where_[c] = 7;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_fifth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fifth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_fifth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_fifth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[14];
					where_[c] = 14;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[14];
					where_[c] = 14;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_fifth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_fifth[i] += d[14];
					where_[c] = 14;
					break;
				}
			}
		}
	}

	int min_index_5 = min_array(sum_distance_fifth);
	////////////////
	// where_ fifth//
	////////////////
	{
		int a = 9;
		int b = 10;
		int c = 11;
		if (block[min_index_5] == random_basecircle_up) {
			int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
			if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
				num[1] = 1;
				num[6] = 1;
			}
			else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
				num[1] = 2;
				num[6] = 2;
			}
			where_[b] = block_number[min_index_5];
			where_[c] = num[min_index_5];
			block_complete[min_index_5] = true;
		}
		else if (block[min_index_5] == random_basecircle_right) {
			int num[8] = { 10,10,10,17,17,17,17,17 };
			if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
				num[3] = 17;
				num[4] = 17;
			}
			else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 23) {
				num[2] = 10;
				num[4] = 10;
			}
			where_[b] = block_number[min_index_5];
			where_[c] = num[min_index_5];
			block_complete[min_index_5] = true;
		}
		else if (block[min_index_5] == random_basecircle_down) {
			int num[8] = { 22,22,23,22,23,22,22,23 };
			if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
				num[1] = 23;
				num[6] = 23;
			}
			else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
				num[1] = 22;
				num[6] = 22;
			}
			where_[b] = block_number[min_index_5];
			where_[c] = num[min_index_5];
			block_complete[min_index_5] = true;
		}
		else if (block[min_index_5] == random_basecircle_left) {
			int num[8] = { 7,7,7,7,14,14,14,14 };
			if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
				num[3] = 14;
				num[4] = 14;
			}
			else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 23) {
				num[3] = 7;
				num[4] = 7;
			}
			where_[b] = block_number[min_index_5];
			where_[c] = num[min_index_5];
			block_complete[min_index_5] = true;
		}
	}
	
	// sum_distance_sixth start!
	for (int i = 0; i < 8; i++) {
		int a = 11;
		int b = 12;
		int c = 13;
		int min_2 = min_index + 1;
		int min_3 = min_index_2 + 1;
		int min_4 = min_index_3 + 1;
		int min_5 = min_index_4 + 1;
		int min_6 = min_index_5 + 1;
		int min_7 = 0;
		int min_8 = 0;
		if (block[i] == random_basecircle_up) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 !=i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[1];
					where_[c] = 1;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
						sum_distance_sixth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_sixth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[2];
					where_[c] = 2;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[1];
					where_[c] = 1;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[1];
					where_[c] = 1;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[1];
					where_[c] = 1;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 25) {
						sum_distance_sixth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_sixth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[1];
					where_[c] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[10];
					where_[c] = 10;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[10];
					where_[c] = 10;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[10];
					where_[c] = 10;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_sixth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_sixth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_sixth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_sixth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[17];
					where_[c] = 17;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[17];
					where_[c] = 17;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[17];
					where_[c] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[22];
					where_[c] = 22;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_sixth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_sixth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[22];
					where_[c] = 22;
					break;

				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[22];
					where_[c] = 22;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[22];
					where_[c] = 22;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[22];
					where_[c] = 22;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_sixth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_sixth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[22];
					where_[c] = 22;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[7];
					where_[c] = 7;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[7];
					where_[c] = 7;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[7];
					where_[c] = 7;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_sixth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_sixth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_sixth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_sixth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[14];
					where_[c] = 14;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[14];
					where_[c] = 14;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_sixth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_sixth[i] += d[14];
					where_[c] = 14;
					break;
				}
			}
		}
	}

	int min_index_6 = min_array(sum_distance_sixth);
	// where_ sixth
	{
		int a = 11;
		int b = 12;
		int c = 13;
		if (block[min_index_6] == random_basecircle_up) {
			int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
			if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
				num[1] = 1;
				num[6] = 1;
			}
			else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
				num[1] = 2;
				num[6] = 2;
			}
			where_[b] = block_number[min_index_6];
			where_[c] = num[min_index_6];
			block_complete[min_index_6] = true;
		}
		else if (block[min_index_6] == random_basecircle_right) {
			int num[8] = { 10,10,10,17,17,17,17,17 };
			if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
				num[3] = 17;
				num[4] = 17;
			}
			else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 23) {
				num[2] = 10;
				num[4] = 10;
			}
			where_[b] = block_number[min_index_6];
			where_[c] = num[min_index_6];
			block_complete[min_index_6] = true;
		}
		else if (block[min_index_6] == random_basecircle_down) {
			int num[8] = { 22,22,23,22,23,22,22,23 };
			if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
				num[1] = 23;
				num[6] = 23;
			}
			else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
				num[1] = 22;
				num[6] = 22;
			}
			where_[b] = block_number[min_index_6];
			where_[c] = num[min_index_6];
			block_complete[min_index_6] = true;
		}
		else if (block[min_index_6] == random_basecircle_left) {
			int num[8] = { 7,7,7,7,14,14,14,14 };
			if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
				num[3] = 14;
				num[4] = 14;
			}
			else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 23) {
				num[3] = 7;
				num[4] = 7;
			}
			where_[b] = block_number[min_index_6];
			where_[c] = num[min_index_6];
			block_complete[min_index_6] = true;
		}
	}

	// sum_distance_seventh start!
	for (int i = 0; i < 8; i++) {
		int a = 13;
		int b = 14;
		int c = 15;
		int min_2 = min_index + 1;
		int min_3 = min_index_2 + 1;
		int min_4 = min_index_3 + 1;
		int min_5 = min_index_4 + 1;
		int min_6 = min_index_5 + 1;
		int min_7 = min_index_6 + 1;
		int min_8 = 0;
		if (block[i] == random_basecircle_up) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[1];
					where_[c] = 1;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
						sum_distance_seventh[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_seventh[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[2];
					where_[c] = 2;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[1];
					where_[c] = 1;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[1];
					where_[c] = 1;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[1];
					where_[c] = 1;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 25) {
						sum_distance_seventh[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_seventh[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[1];
					where_[c] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[10];
					where_[c] = 10;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[10];
					where_[c] = 10;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[10];
					where_[c] = 10;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_seventh[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_seventh[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_seventh[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_seventh[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[17];
					where_[c] = 17;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[17];
					where_[c] = 17;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[17];
					where_[c] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[22];
					where_[c] = 22;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_seventh[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_seventh[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[22];
					where_[c] = 22;
					break;

				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[22];
					where_[c] = 22;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[22];
					where_[c] = 22;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[22];
					where_[c] = 22;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_seventh[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_seventh[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[22];
					where_[c] = 22;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[7];
					where_[c] = 7;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[7];
					where_[c] = 7;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[7];
					where_[c] = 7;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_seventh[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_seventh[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_seventh[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_seventh[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[14];
					where_[c] = 14;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[14];
					where_[c] = 14;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_seventh[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_seventh[i] += d[14];
					where_[c] = 14;
					break;
				}
			}
		}
	}

	int min_index_7 = min_array(sum_distance_seventh);
	// where_ seventh
	{
		int a = 13;
		int b = 14;
		int c = 15;
		if (block[min_index_7] == random_basecircle_up) {
			int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
			if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
				num[1] = 1;
				num[6] = 1;
			}
			else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
				num[1] = 2;
				num[6] = 2;
			}
			where_[b] = block_number[min_index_7];
			where_[c] = num[min_index_7];
			block_complete[min_index_7] = true;
		}
		else if (block[min_index_7] == random_basecircle_right) {
			int num[8] = { 10,10,10,17,17,17,17,17 };
			if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
				num[3] = 17;
				num[4] = 17;
			}
			else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 23) {
				num[2] = 10;
				num[4] = 10;
			}
			where_[b] = block_number[min_index_7];
			where_[c] = num[min_index_7];
			block_complete[min_index_7] = true;
		}
		else if (block[min_index_7] == random_basecircle_down) {
			int num[8] = { 22,22,23,22,23,22,22,23 };
			if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
				num[1] = 23;
				num[6] = 23;
			}
			else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
				num[1] = 22;
				num[6] = 22;
			}
			where_[b] = block_number[min_index_7];
			where_[c] = num[min_index_7];
			block_complete[min_index_7] = true;
		}
		else if (block[min_index_7] == random_basecircle_left) {
			int num[8] = { 7,7,7,7,14,14,14,14 };
			if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
				num[3] = 14;
				num[4] = 14;
			}
			else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 23) {
				num[3] = 7;
				num[4] = 7;
			}
			where_[b] = block_number[min_index_7];
			where_[c] = num[min_index_7];
			block_complete[min_index_7] = true;
		}
	}

	// sum_distance_eighth start!
	for (int i = 0; i < 8; i++) {
		int a = 15;
		int b = 16;
		int c = 17;
		int min_2 = min_index + 1;
		int min_3 = min_index_2 + 1;
		int min_4 = min_index_3 + 1;
		int min_5 = min_index_4 + 1;
		int min_6 = min_index_5 + 1;
		int min_7 = min_index_6 + 1;
		int min_8 = min_index_7 + 1;
		if (block[i] == random_basecircle_up) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i && min_index_7 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[1];
					where_[c] = 1;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
						sum_distance_eighth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_eighth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[2];
					where_[c] = 2;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[1];
					where_[c] = 1;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[1];
					where_[c] = 1;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[1];
					where_[c] = 1;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 10 || where_[a] == 17 || where_[a] == 25) {
						sum_distance_eighth[i] += d[1];
						where_[c] = 1;
					}
					else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
						sum_distance_eighth[i] += d[2];
						where_[c] = 2;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[1];
					where_[c] = 1;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_right) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i && min_index_7 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[10];
					where_[c] = 10;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[10];
					where_[c] = 10;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[10];
					where_[c] = 10;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_eighth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_eighth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
						sum_distance_eighth[i] += d[17];
						where_[c] = 17;
					}
					else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_eighth[i] += d[10];
						where_[c] = 10;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[17];
					where_[c] = 17;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[17];
					where_[c] = 17;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[17];
					where_[c] = 17;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_down) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i && min_index_7 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[22];
					where_[c] = 22;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_eighth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_eighth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[22];
					where_[c] = 22;
					break;

				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[22];
					where_[c] = 22;
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[22];
					where_[c] = 22;
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[22];
					where_[c] = 22;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
						sum_distance_eighth[i] += d[22];
						where_[c] = 22;
					}
					else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
						sum_distance_eighth[i] += d[22];
						where_[c] = 22;
					}
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[22];
					where_[c] = 22;
					break;
				}
			}
		}
		else if (block[i] == random_basecircle_left) {
			if (min_index != i && min_index_2 != i && min_index_3 != i && min_index_4 != i && min_index_5 != i && min_index_6 != i && min_index_7 != i) {
				switch (i) {
				case 0:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[7];
					where_[c] = 7;
					break;
				case 1:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[7];
					where_[c] = 7;
					break;
				case 2:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[7];
					where_[c] = 7;
					break;
				case 3:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_eighth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_eighth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 4:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
						sum_distance_eighth[i] += d[14];
						where_[c] = 14;
					}
					else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 25) {
						sum_distance_eighth[i] += d[7];
						where_[c] = 7;
					}
					break;
				case 5:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[14];
					where_[c] = 14;
					break;
				case 6:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[14];
					where_[c] = 14;
					break;
				case 7:
					dijkstra(where_[a], block_all[i]);
					where_[b] = d[block_number[i]];
					sum_distance_eighth[i] += d[block_number[i]];
					dijkstra(block_number[i], block_graph(block_all[i], min_2, min_3, min_4, min_5, min_6, min_7, min_8));
					sum_distance_eighth[i] += d[14];
					where_[c] = 14;
					break;
				}
			}
		}
	}

	int min_index_8 = min_array(sum_distance_eighth);
	//where_ eighth
	{
		int a = 15;
		int b = 16;
		int c = 17;
		if (block[min_index_8] == random_basecircle_up) {
			int num[8] = { 1, 1, 2, 1, 2, 1, 1, 2 };
			if (where_[a] == 10 || where_[a] == 17 || where_[a] == 23) {
				num[1] = 1;
				num[6] = 1;
			}
			else if (where_[a] == 7 || where_[a] == 14 || where_[a] == 22) {
				num[1] = 2;
				num[6] = 2;
			}
			where_[b] = block_number[min_index_8];
			where_[c] = num[min_index_8];
			block_complete[min_index_8] = true;
		}
		else if (block[min_index_8] == random_basecircle_right) {
			int num[8] = { 10,10,10,17,17,17,17,17 };
			if (where_[a] == 7 || where_[a] == 1 || where_[a] == 2) {
				num[3] = 17;
				num[4] = 17;
			}
			else if (where_[a] == 14 || where_[a] == 22 || where_[a] == 23) {
				num[2] = 10;
				num[4] = 10;
			}
			where_[b] = block_number[min_index_8];
			where_[c] = num[min_index_8];
			block_complete[min_index_8] = true;
		}
		else if (block[min_index_8] == random_basecircle_down) {
			int num[8] = { 22,22,23,22,23,22,22,23 };
			if (where_[a] == 1 || where_[a] == 7 || where_[a] == 14) {
				num[1] = 23;
				num[6] = 23;
			}
			else if (where_[a] == 2 || where_[a] == 10 || where_[a] == 17) {
				num[1] = 22;
				num[6] = 22;
			}
			where_[b] = block_number[min_index_8];
			where_[c] = num[min_index_8];
			block_complete[min_index_8] = true;
		}
		else if (block[min_index_8] == random_basecircle_left) {
			int num[8] = { 7,7,7,7,14,14,14,14 };
			if (where_[a] == 1 || where_[a] == 2 || where_[a] == 10) {
				num[3] = 14;
				num[4] = 14;
			}
			else if (where_[a] == 17 || where_[a] == 22 || where_[a] == 23) {
				num[3] = 7;
				num[4] = 7;
			}
			where_[b] = block_number[min_index_8];
			where_[c] = num[min_index_8];
			block_complete[min_index_8] = true;
		}
	}

	std::cout << "経路：";
	for (int i = 0; i < 100; i++) {
		if (where_[i] != 0) {
			std::cout << where_[i] << "->";
		}
	}
	std::cout << endl;

	std::cout << "First block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_first[i] << ", ";
	}
	std::cout << endl<<"最小インデックス：" << min_index<<endl;

	std::cout << "Second block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_second[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_2 << endl;

	std::cout << "Third block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_third[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_3 << endl;

	std::cout << "Fourth block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_fourth[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_4 << endl;

	std::cout << "Fifth block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_fifth[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_5 << endl;

	std::cout << "Sixth block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_sixth[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_6 << endl;

	std::cout << "Seventh block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_seventh[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_7 << endl;

	std::cout << "Eighth block : ";
	for (int i = 0; i < 8; i++) {
		std::cout << sum_distance_eighth[i] << ", ";
	}
	std::cout << endl << "最小インデックス：" << min_index_8 << endl;

	std::cout << endl << endl << "最小距離：" << sum_distance_first[min_index] + sum_distance_second[min_index_2] + sum_distance_third[min_index_3] + sum_distance_fourth[min_index_4] + sum_distance_fifth[min_index_5] + sum_distance_sixth[min_index_6] + sum_distance_seventh[min_index_7] + sum_distance_eighth[min_index_8];

	fs.close();
}

int min_array(double* a) {
	int min = 1000;
	int min_index = 1000;
	int i = 0;
	for (i = 0; i < 100; i++) {
		if (a[i] != 0) {
			if (min >= a[i]) {
				min = a[i];
				min_index = i;
			}
		}
	}
	return min_index;
}
